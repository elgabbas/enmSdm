% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/predictMaxEnt.r
\name{predictMaxEnt}
\alias{predictMaxEnt}
\title{Predict a MaxEnt model object (with optional feature-level permutation)}
\usage{
predictMaxEnt(x, data, type = "cloglog", perm = NULL,
  permLinear = NULL, permQuad = NULL, permHinge = NULL,
  permThresh = NULL, permProd = NULL, permProdRule = NULL, ...)
}
\arguments{
\item{x}{Either a Maxent lambda object or a Maxent model object}

\item{data}{Data frame. Data to which to make predictions}

\item{type}{Charcater.  One of: \code{'raw'} ==> produce Maxent raw values; \code{'logistic'} ==> Maxent logistic values; or \code{'cloglog'} ==> complementary log-log output (as per version 3.4.0+ of maxent--called "\code{maxnet()}" in the package of the same name)}

\item{perm}{Character list. Name(s) of variable to permute before calculating predictions. This permutes the variables for \emph{all} features in which they occur.  If a variable is named here, it overrides permutation settings for each feature featType.  Note that for product features the variable is permuted before the product is taken. This permutation is performed before any subsequent permutations (i.e., so if both variables in a product feature are included in \code{perms}, then this is equivalent to using the \code{'before'} rule for \code{permProdRule}). Ignored if \code{NULL}.}

\item{permLinear}{Character list. Names(s) of variables to permute in linear features before calculating predictions.  Ignored if \code{NULL}.}

\item{permQuad}{Names(s) of variables to permute in quadratic features before calculating predictions.  Ignored if \code{NULL}.}

\item{permHinge}{Character list. Names(s) of variables to permute in forward/reverse hinge features before calculating predictions.  Ignored if \code{NULL}.}

\item{permThresh}{Character list. Names(s) of variables to permute in threshold features before calculating predictions.  Ignored if \code{NULL}.}

\item{permProd}{Character list. A list object of \code{n} elements, each of which has two character elements naming the variables to permute if they occur in a product feature.  Depending on the value of \code{permProdRule}, the function will either permute the individual variables then calculate their product or calculate their product, then permute the product across observations.  Any other features containing the variables will produce values as normal.  Example: \code{permProd=list(c('precipWinter', 'tempWinter'), c('tempSummer', 'precipFall'))}.  The order of the variables in each element of \code{permProd} doesn't matter, so \code{permProd=list(c('temp', 'precip'))} is the same as \code{permProd=list(c('precip', 'temp'))}.  Ignored if \code{NULL}.}

\item{permProdRule}{Character. Rule for how permutation of product features is applied: \code{'before'} ==> Permute individual variable values then calculate product; \code{'after'} ==> calculate product then permute across these values. Ignored if \code{permProd} is \code{NULL}.}

\item{...}{Extra arguments (not used).}
}
\value{
Numeric.
}
\description{
Takes a MaxEnt \code{lambda} object or a MaxEnt object and returns raw or logistic predictions.  Its output is the same as the function \code{raster::predict(maxentModelObject, dataFrame)} or \code{raster::predict(maxentModelObject, dataFrame, args='outputformat=raw')} (to within rounding error), and in fact those functions should be faster.  However, this function does allow custom manipulations that those functions do not allow (e.g., permuting product features while leaving other features with the same variables intact).  This function is based on Peter D. Wilson's document "Guidelines for computing MaxEnt model output values from a lambdas file".
}
\examples{
\donttest{
set.seed(123)
data <- matrix(rnorm(n = 6*1000), ncol = 6)
# true variables will be #1, #2, #5, and #6, plus
# the squares of #1 and #6, plus
# interaction between #1 and #6
# the cube of #5
imp <- c('x1', 'x2', 'x3', 'x4', 'x5', 'x6', 'x1_pow2', 'x6_pow2', 'x1_by_x6', 'x5_pow3')
betas <- c(5, 2, 0, 0, 1, -1, 8, 1, 2, -4)
names(betas) <- imp
y <- 0.5 + data \%*\% betas[1:6] + betas[7] * data[ , 1] +
betas[8] * data[ , 6] + betas[9] * data[ , 1] * data[ , 6] + betas[10] * data[ , 5]^3
y <- as.integer(y > 10)
data <- cbind(y, data)
data <- as.data.frame(data)
names(data) <- c('y', 'x1', 'x2', 'x3', 'x4', 'x5', 'x6')

x <- maxent(data[ , -1], data$y)

pred <- predict(x, data)
predNew <- predictMaxEnt(x, data, type='logistic')
plot(pred, predNew)

predPermAll <- predictMaxEnt(
    x=x,
    data=data,
    perm=c('x1', 'x2', 'x3', 'x4', 'x5', 'x6'),
	type='logistic'
)

predPermLinear <- predictMaxEnt(x=x, data=data, permLinear='x1', type='logistic')
predPermQuad <- predictMaxEnt(x=x, data=data, permQuad='x1', type='logistic')
predPermHinge <- predictMaxEnt(x=x, data=data, permHinge='x1', type='logistic')
predPermThresh <- predictMaxEnt(x=x, data=data, permThresh='x1', type='logistic')
predPermProdBefore <- predictMaxEnt(x=x, data=data, permProd=list(c('x1', 'x6')),
	permProdRule='before', type='logistic')
predPermProdAfter <- predictMaxEnt(x=x, data=data, permProd=list(c('x1', 'x6')),
	permProdRule='after', type='logistic')
predPermX1 <- predictMaxEnt(x=x, data=data, perm='x1', type='logistic')

predPermAll <- predPermAll[order(pred)]
predPermLinear <- predPermLinear[order(pred)]
predPermQuad <- predPermQuad[order(pred)]
predPermHinge <- predPermHinge[order(pred)]
predPermThresh <- predPermThresh[order(pred)]
predPermProdBefore <- predPermProdBefore[order(pred)]
predPermProdAfter <- predPermProdAfter[order(pred)]
predPermX1 <- predPermX1[order(pred)]
predNew <- predNew[order(pred)]
pred <- pred[order(pred)]

plot(pred, ylab='Prediction', xlab='Index (ordered from low to high unpermuted prediction)')
points(predNew, pch=3, col=2, cex=2)
points(predPermLinear, pch=2, col=3)
points(predPermQuad, pch=4, col=4)
points(predPermHinge, pch=5, col=5)
points(predPermThresh, pch=6, col=6)
points(predPermProdBefore, pch=7, col=7)
points(predPermProdAfter, pch=8, col=8)
points(predPermAll, pch=9, col=9)
points(predPermX1, pch=10, col=10)

legend('topleft',
	inset=0.01,
	pch=c(1, 3, 2, 4, 5, 6, 7, 8, 9, 10),
	col=1:10,
	bg='white',
	legend=c('raster::predict()',
		'enmSdm::predictMaxEnt()',
		'permuted x1 linear',
		'permuted x1 quadratic',
		'permuted x1 hinge',
		'permuted x1 threshold',
		'permuted x1 product (before)',
		'permuted x1 product (after)',
		'permuted (all variables/features)',
		'permuted x1 all features'
	)
)
}
}
\seealso{
\code{\link[dismo]{maxent}}
}
